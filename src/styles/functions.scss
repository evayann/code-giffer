@use "sass:list";
@use "sass:color";
@use "sass:math";

@function transparent($colorVariable, $alpha) {
    @return color-mix(in srgb, #{$colorVariable}, transparent $alpha);
}

@function dark($colorVariable, $alpha) {
    @return color-mix(in srgb, #{$colorVariable}, black $alpha);
}

@function light($colorVariable, $alpha) {
    @return color-mix(in srgb, #{$colorVariable}, white $alpha);
}

@function invert($color, $amount: 100%) {
    $inverse: change-color($color, $hue: hue($color) + 180);
    @return mix($inverse, $color, $amount);
}

// @function contrast-ratio($color1, $color2) {
//     $luminance1: 0.2126 * color.red($color1) + 0.7152 * color.green($color1) +
//         0.0722 * color.blue($color1);
//     $luminance2: 0.2126 * color.red($color2) + 0.7152 * color.green($color2) +
//         0.0722 * color.blue($color2);

//     @if $luminance1 > $luminance2 {
//         @return math.div(($luminance1 + 0.05), ($luminance2 + 0.05));
//     }

//     @return math.div(($luminance2 + 0.05), ($luminance1 + 0.05));
// }

// @function contrast($color, $min-contrast-ratio: 2) {
//     $candidate-color-list-for-contrast: #f4f5f8, #d0d0d0, #222428, #fff, #000;

//     @each $candidate-color-for-contrast in $candidate-color-list-for-contrast {
//         @if (
//             contrast-ratio($candidate-color-for-contrast, $color) >
//                 $min-contrast-ratio
//         ) {
//             @return $candidate-color-for-contrast;
//         }
//     }

//     @warn "No color found with good contrast";
//     @return red;
// }

@function contrast($color, $threshold: 50%, $light: #f4f5f8, $dark: #222428) {
    @return if(lightness($color) < $threshold, $light, $dark);
}

@mixin createProperties($list, $propertyName) {
    @for $index from 1 through length($list) {
        --#{$propertyName}-#{$index}: #{list.nth($list, $index)};
    }
}
